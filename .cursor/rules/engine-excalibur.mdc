---
description: Excalibur.js engine implementation
globs: packages/engine-excalibur/**/*.ts
alwaysApply: false
---
# Excalibur Engine Implementation

The `engine-excalibur` package provides an implementation of the engine interfaces defined in `engine-core` using the Excalibur.js game engine. This package enables web-based game rendering and interaction.

## Package Responsibilities
- Implement the `EngineInterface` using Excalibur.js
- Handle rendering of game maps and sprites
- Process user input events
- Manage the game loop and timing
- Provide Excalibur-specific systems and components
- Bridge between core engine interfaces and Excalibur.js functionality

## Implementation Details

### ExcaliburEngine Class
The main `ExcaliburEngine` class:
- Implements the `EngineInterface` from `engine-core`
- Manages an Excalibur `Engine` instance
- Handles project and map loading
- Controls engine lifecycle (start, stop, pause, resume)
- Processes input events and messages

### Systems
The package includes Excalibur-specific systems:
- `EditorInputSystem`: Captures and processes user input in the editor
- Additional systems for game mechanics and rendering

### Type Safety
- Uses custom type definitions to ensure type safety when working with Excalibur
- Defines interfaces like `ExcaliburEngineType` to properly type Excalibur objects
- Handles Excalibur-specific event types like wheel events

## Message Handling
- Implements the unified message system defined in `engine-core`
- Translates between engine messages and Excalibur events
- Handles input events and forwards them to the appropriate handlers

## Integration with Data Packages
- Works closely with `data-excalibur` for loading and rendering game assets
- Uses `GameProjectResource` for managing game projects and maps
- Accesses map data through the appropriate resource classes

## Development Guidelines
When working with the Excalibur engine implementation:
- Follow Excalibur.js best practices
- Maintain clean separation between engine logic and rendering
- Use proper type definitions to avoid runtime errors
- Handle browser-specific concerns appropriately
- Ensure proper cleanup of resources to prevent memory leaks
- Test with different browser environments

## Relationship to Other Packages
- Implements interfaces from `engine-core`
- Uses resources from `data-excalibur`
- Communicates using message types from `messages-core`
- Provides engine functionality for web-based applications