---
description: Guidelines for GJS packages (engine-gjs, data-gjs, message-channel-gjs)
globs: packages/*-gjs/**/*.ts, apps/maker-gjs/**/*.ts
alwaysApply: false
---
# GJS Packages

GJS packages (`*-gjs`) implement core interfaces for the GNOME JavaScript (GJS) runtime environment, enabling desktop-based applications with GTK.

## Package Responsibilities
- Implement interfaces defined in corresponding core packages
- Provide GTK-friendly APIs and components
- Handle GNOME-specific UI patterns and integrations
- Bridge between core interfaces and GJS/GTK functionality
- Focus on desktop application integration

## Implementation Patterns
- Use GObject-style classes with proper inheritance
- Follow GNOME naming conventions and patterns
- Handle GJS-specific memory management concerns
- Use GTK modern patterns (like composite templates)
- Properly integrate with GObject-introspection
- Prefer GObject-oriented and UI-first approach for cleaner, more declarative code

## GObject Properties and Signals
- Use GObject properties instead of regular class properties for better UI integration
- Implement property bindings in UI templates to reduce manual widget updates
- Leverage GObject signals for class-to-class communication
- Design components to emit signals rather than accept callbacks
- Use template callbacks to handle signals from child components

## UI Components
- Create reusable GTK widgets and components
- Follow GNOME Human Interface Guidelines
- Implement responsive layouts
- Handle proper resource management
- Support accessibility features
- Use Blueprint templates for declarative UI definitions when possible

## Integration with Core Packages
- Implement core interfaces faithfully
- Translate between core types and GJS/GTK types
- Handle platform-specific edge cases
- Provide GJS-specific extensions where needed
- Maintain type safety in interface implementations

## Message Handling
- Use WebKit's UserContentManager for standard-compliant message handling
- Register script message handlers for receiving messages from WebViews
- Use evaluate_javascript with standard APIs for sending messages to WebViews
- Implement the abstract classes from message-channel-core package
- Support both WebKit message handlers and window.postMessage standards
- Ensure proper error handling and type safety in message passing