---
description: Integration with web browsers and standard web technologies
globs: packages/*-web/**/*.ts
---
# Web Integration

The `-web` suffix packages implement integration with standard web technologies and browsers. These packages follow our runtime-specific implementation pattern and complement the core packages, providing browser-based implementations that are independent of specific game engines like Excalibur.

## Package Responsibilities
- Implement web-specific resource loaders using Fetch API and other web standards
- Convert core data structures to DOM/Canvas/WebGL objects for rendering
- Handle animation and rendering concerns in browser environments
- Provide utilities for working with data in web applications
- Depend on corresponding `-core` packages for data structures

## Web Technologies Background
Web integration leverages standard browser technologies like Canvas, WebGL, and the DOM. This approach allows for lightweight implementations that don't require external game engines while still providing powerful rendering capabilities. The integration follows modern web development best practices and standards.

## Implementation Patterns
- Use standard browser APIs (Canvas 2D, WebGL, DOM) for rendering
- Implement efficient resource loading with the Fetch API and asset management
- Create appropriate rendering components using requestAnimationFrame
- Develop responsive layouts that work across different screen sizes
- Provide helper methods for common web application tasks
- Support both module and script tag inclusion patterns

## Development Guidelines
When implementing web integration:
- Maintain clean separation between core logic and web-specific code
- Follow modern JavaScript/TypeScript best practices
- Ensure cross-browser compatibility
- Optimize for performance in browser environments
- Provide comprehensive examples and documentation
- Test with various browsers and devices for compatibility
- Consider progressive enhancement for broader compatibility

## Relationship to Core Packages
- Each `-web` package should have a corresponding `-core` package
- Core data structures are consumed but never modified
- Web-specific extensions should be kept in the `-web` package
- Avoid circular dependencies between packages

## Differences from Excalibur Integration
- Focuses on standard web technologies rather than game engine specifics
- Lighter weight for applications that don't need a full game engine
- More suitable for data visualization, simple interactions, or embedded components
- Can be used alongside other web frameworks (React, Vue, etc.)
- Provides more direct control over rendering and browser integration
