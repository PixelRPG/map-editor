---
description: Integration with web browsers and standard web technologies
globs: packages/*-web/**/*.ts, packages/*-web/**/*.tsx, apps/*-web/**/*.ts, apps/*-web/**/*.tsx
---
# Web Integration

The `-web` suffix in packages and apps indicates integration with web browser technologies. This includes both library packages (`packages/*-web`) that provide web-specific implementations and end-user applications (`apps/*-web`) that run in web browsers.

## Package Responsibilities

Web library packages (`packages/*-web`) should:
- Implement web-specific resource loaders
- Convert core data structures to DOM/Canvas/WebGL objects
- Provide browser-friendly APIs for data structures
- Handle animation and rendering concerns in web applications
- Depend on corresponding `-core` packages for data structures
- Focus on reusable components and services

## Application Responsibilities

Web applications (`apps/*-web`) should:
- Implement full user-facing applications using web technologies
- Follow modern web application architecture patterns
- Utilize the libraries from `packages/*-web` and potentially `packages/*-excalibur`
- Provide complete browser-based experiences
- Handle proper resource management and application lifecycle

## Implementation Patterns

### For Libraries
- Create browser-compatible implementations using standard Web APIs
- Use appropriate web rendering technologies (Canvas, WebGL, DOM)
- Implement resource loading with fetch API or XML/HTTP requests
- Provide frame-based animations using requestAnimationFrame
- Handle browser-specific considerations and fallbacks

### For Applications
- Structure as modern web applications (SPA, PWA, etc.)
- Use appropriate bundlers (Webpack, Vite, Parcel, etc.)
- Follow responsive design principles
- Implement progressive enhancement where possible
- Consider offline capabilities with Service Workers
- Use TypeScript for type safety

## WebKit Integration with GJS

For the RPG Maker application:
- Excalibur.js game engine runs in a WebKit context embedded in GTK
- Map rendering and game preview occur within the WebKit environment
- Communication between web context and GJS is handled through message passing
- `@pixelrpg/messages-web` package provides the web side of this communication
- Communication uses WebKit's message handler system for bidirectional messaging
- Game data structures from `-core` packages are converted to Excalibur.js entities

## Web-Specific Considerations

- Browser compatibility requirements
- Mobile vs. desktop web experiences
- Touch input handling
- Performance optimization for web contexts
- Asset loading and caching strategies
- Network requirements and handling

## Development Guidelines

When implementing web integration:
- Follow modern JavaScript/TypeScript best practices
- Ensure cross-browser compatibility (where required)
- Optimize asset loading for web delivery
- Consider progressive web app capabilities
- Document browser requirements
- Implement responsive design principles
- Use appropriate frameworks based on project needs

## Relationship to Core Packages

- Each `-web` package should have a corresponding `-core` package
- Core data structures are consumed but never modified
- Web-specific extensions should be kept in the `-web` packages
- Avoid circular dependencies between packages
