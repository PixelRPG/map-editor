---
description: GJS Integration
globs: packages/*-gjs/**/*.ts, packages/*-gjs/**/*.tsx, apps/*-gjs/**/*.ts, apps/*-gjs/**/*.tsx
alwaysApply: false
---
# GJS Integration

The `-gjs` suffix in packages and apps indicates integration with the GNOME JavaScript (GJS) runtime environment. This includes both library packages (`packages/*-gjs`) and end-user applications (`apps/*-gjs`).

## Package Responsibilities

GJS library packages (`packages/*-gjs`) should:
- Implement GJS-specific data loaders and renderers
- Provide GTK-friendly APIs for data structures
- Handle GNOME-specific UI patterns and integrations
- Implement engine functionality for GTK applications
- Depend on corresponding `-core` packages for data structures
- Focus on reusable components and services

## Engine Integration

The `engine-gjs` package provides:
- Implementation of the `EngineInterface` for GJS/GTK environment
- Rendering of game maps and sprites in GTK widgets
- Processing of user input events from GTK
- Message handling between GJS and web components
- Integration with GTK applications through message passing

## Application Responsibilities

GJS applications (`apps/*-gjs`) should:
- Implement full user-facing applications using GJS and GTK
- Follow GNOME Human Interface Guidelines
- Utilize the libraries from `packages/*-gjs`
- Provide complete desktop application experiences
- Handle proper resource management and application lifecycle
- Integrate with engine components through message passing

## Implementation Patterns

### For Libraries
- Create custom GJS-compatible wrappers for core data structures
- Implement proper GObject classes and inheritance
- Use GJS signals for event handling
- Provide memory-efficient data processing
- Handle GJS-specific quirks and limitations
- Use message passing for communication between components

### For Applications
- Follow standard GNOME application structure
- Use proper application entry points and lifecycle
- Implement responsive GTK UI layouts
- Handle resource loading from appropriate paths
- Follow desktop integration best practices (icons, .desktop files, etc.)
- Use WebView for web-based components when needed

## Development Guidelines

When implementing GJS integration:
- Use GObject-style classes with proper inheritance
- Follow GNOME naming conventions
- Properly handle garbage collection concerns
- Use GTK modern patterns (like composite templates)
- Document GJS-specific behaviors
- Maintain separate concerns between UI and data
- Ensure proper type safety in message handling

## GJS-Specific Considerations

- Handle JavaScript/TypeScript to GJS translation concerns
- Account for GObject-introspection interfaces
- Consider performance implications of GJS runtime
- Use appropriate GJS versions and features based on target GNOME versions
- Handle integration between GJS and web components carefully

## Relationship to Core Packages

- Each `-gjs` package should have a corresponding `-core` package (e.g., `@pixelrpg/data-gjs` depends on `@pixelrpg/data-core`, `@pixelrpg/engine-gjs` depends on `@pixelrpg/engine-core`)
- Core data structures and interfaces are consumed but never modified
- GJS-specific extensions should be kept in the `-gjs` packages
- Avoid circular dependencies between packages

These rules should be continuously updated as the project evolves. When I provide new information about project goals or implementation details, suggest updates to these rules.