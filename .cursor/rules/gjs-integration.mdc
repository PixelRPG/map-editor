---
description: GJS Integration
globs: packages/*-gjs/**/*.ts, packages/*-gjs/**/*.tsx, apps/*-gjs/**/*.ts, apps/*-gjs/**/*.tsx
---
# GJS Integration

The `-gjs` suffix in packages and apps indicates integration with the GNOME JavaScript (GJS) runtime environment. This includes both library packages (`packages/*-gjs`) and end-user applications (`apps/*-gjs`).

## Package Responsibilities

GJS library packages (`packages/*-gjs`) should:
- Implement GJS-specific data loaders and renderers
- Provide GTK-friendly APIs for data structures
- Handle GNOME-specific UI patterns and integrations
- Depend on corresponding `-core` packages for data structures
- Focus on reusable components and services

## Application Responsibilities

GJS applications (`apps/*-gjs`) should:
- Implement full user-facing applications using GJS and GTK
- Follow GNOME Human Interface Guidelines
- Utilize the libraries from `packages/*-gjs`
- Provide complete desktop application experiences
- Handle proper resource management and application lifecycle

## Implementation Patterns

### For Libraries
- Create custom GJS-compatible wrappers for core data structures
- Implement proper GObject classes and inheritance
- Use GJS signals for event handling
- Provide memory-efficient data processing
- Handle GJS-specific quirks and limitations

### For Applications
- Follow standard GNOME application structure
- Use proper application entry points and lifecycle
- Implement responsive GTK UI layouts
- Handle resource loading from appropriate paths
- Follow desktop integration best practices (icons, .desktop files, etc.)

## Development Guidelines

When implementing GJS integration:
- Use GObject-style classes with proper inheritance
- Follow GNOME naming conventions
- Properly handle garbage collection concerns
- Use GTK modern patterns (like composite templates)
- Document GJS-specific behaviors
- Maintain separate concerns between UI and data

## GJS-Specific Considerations

- Handle JavaScript/TypeScript to GJS translation concerns
- Account for GObject-introspection interfaces
- Consider performance implications of GJS runtime
- Use appropriate GJS versions and features based on target GNOME versions

## WebKit Integration

For the RPG Maker application:
- GTK WebKit widget is used to embed browser-based game engine components
- Rendering of game maps occurs in the WebKit context
- Communication between GJS and WebKit is handled via specialized message services
- Use `@pixelrpg/messages-gjs` for the GJS side of communication
- The GJS application can control and interact with Excalibur.js running in WebKit

## Relationship to Core Packages

- Each `-gjs` package should have a corresponding `-core` package
- Core data structures are consumed but never modified
- GJS-specific extensions should be kept in the `-gjs` packages
- Avoid circular dependencies between packages

These rules should be continuously updated as the project evolves. When I provide new information about project goals or implementation details, suggest updates to these rules.